// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---
// These enums directly map to the PostgreSQL ENUM types defined previously.
// They provide type safety for fixed sets of values in your models.

enum UserRole {
  ADMIN  @map("admin") // Maps the Prisma enum value to the database enum value
  EDITOR @map("editor")
  VIEWER @map("viewer")
}

enum DocumentStatus {
  PENDING_UPLOAD @map("pending_upload")
  UPLOADED       @map("uploaded")
  PROCESSING     @map("processing")
  PROCESSED      @map("processed")
  FAILED         @map("failed")
}

enum IngestionStatus {
  INITIATED   @map("initiated")
  IN_PROGRESS @map("in_progress")
  COMPLETED   @map("completed")
  FAILED      @map("failed")
}

model User {
  id                 Int                @id @default(autoincrement())
  firstName          String             @map("first_name")
  lastName           String             @map("last_name")
  email              String             @unique
  password           String             
  role               UserRole           @default(VIEWER)
  isActive           Boolean            @default(true) @map("is_active")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  documents          Document[]
  ingestionProcesses IngestionProcess[]

  @@map("users")
}

model Document {
  id                 Int                @id @default(autoincrement())
  title              String
  description        String?
  filename           String
  filePath           String             @map("file_path")
  mimeType           String             @map("mime_type")
  fileSize           BigInt             @map("file_size")
  status             DocumentStatus     @default(PENDING_UPLOAD)
  ownerId            Int                @map("owner_id")
  owner              User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  ingestionProcesses IngestionProcess[]

  @@map("documents")
}

// Model for the `ingestion_processes` table
model IngestionProcess {
  id            Int             @id @default(autoincrement()) 
  documentId    Int             @map("document_id") 
  status        IngestionStatus @default(INITIATED) 
  metadata      Json? 
  errorMessage  String?         @map("error_message") 
  document      Document        @relation(fields: [documentId], references: [id], onDelete: Cascade) 
  triggeredById Int?            @map("triggered_by_id") 
  triggeredBy   User?           @relation(fields: [triggeredById], references: [id], onDelete: SetNull) 
  triggeredAt DateTime  @default(now()) @map("triggered_at") 
  completedAt DateTime? @map("completed_at") 
  @@map("ingestion_processes") 
}
